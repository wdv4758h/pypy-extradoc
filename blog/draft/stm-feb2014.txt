Hi all,

A quick note about the Software Transactional Memory (STM) front.

Since the <a
href="http://morepypy.blogspot.com/2013/10/update-on-stm.html">previous
post</a>, we believe we progressed a lot by discovering an alternative
core model for software transactions.  Why do I say "believe"?  It's
because it means <i>again</i> that we have to rewrite from scratch the C
library handling STM.  This is currently work in progress.  Once this is
done, we should be able to adapt the existing pypy-stm to run on top of
it without much rewriting efforts; in fact it should simplify the
difficult issues we ran into for the JIT.  So while this is basically
yet another restart similar to <a
href="http://morepypy.blogspot.com/2013/06/stm-on-drawing-board.html">last
June's</a>, the difference is that the work that we have already put in
the PyPy part (as opposed to the C library) remains.

You can read about the basic ideas of this new C library <a
href="https://bitbucket.org/pypy/stmgc/raw/c7/c7/README.txt">here</a>.
It is still STM-only, not HTM, but because it doesn't constantly move
objects around in memory, it would be easier to adapt an HTM version.
There are even potential ideas about a hybrid TM, like using HTM but
only to speed up the commits.  It is based on a <a
href="http://bpaste.net/show/177186/">Linux-only</a> system call, <a
href="http://man7.org/linux/man-pages/man2/remap_file_pages.2.html">remap_file_pages()</a>
(poll: who heard about it before? :-).  As previously, the work is done
by Remi Meier and myself.

Currently, the C library is incomplete, but early experiments show good
results in running <a
href="http://morepypy.blogspot.com/2013/07/software-transactional-memory-lisp.html">duhton</a>,
the interpreter for a minimal language created for the purpose of
testing STM.  Good results means we brough down the slow-downs from
60-80% (previous version) to around 15% (current version).  This number
measures the slow-down from the non-STM-enabled to the STM-enabled
version, on one CPU core; of course, the idea is that the STM version
scales up when using more than one core.

This means that we are looking forward to a result that is much better
than originally predicted.  The pypy-stm has chances to run at a
one-thread speed that is only "n%" slower than the regular pypy-jit, for
a value of "n" that is optimistically 15 --- but more likely some number
around 25 or 50.  This is seriously better than the original estimate,
which was "between 2x and 5x".  It would mean that using pypy-stm is
quite worthwhile even with just two cores.

More updates later...

Armin
