Duesseldorf sprint planning
===========================

times: 10am - ...
       Wednesday morning: various presentations
       Thursday breakday
       Saturday: py-lib release thinking

Attendees: 
Carl Friedrich, Armin, Michael, Antonio, Samuele, Anders, Maciej, Stephan,
Eric, Niko, Leonardo, Richard, Christian, Guido


Tasks
=====

 - javascript interpreter (leonardo, guido around)
   addition of numbers, strings (with proper, twisted semantics) works
   integration of the narcissus parser
   nested scopes, variable declarations, functions without parameters
   function arguments working, windows support, argument attribute
   implemented grouping, the comma-operator, mac-os support, exceptions
   support for "while", "if"
   working on frames and prototypes

 - jvm backend
   sharing code between gencli and genjvm
   first tests running!
   number manipulations, field access
   more tests running! added support for classes, in-progress: constants

 - transparent proxies (maciek, samuele)
   lists are working somehow, refactoring in progress
   dictionaries seem to work somewhat
   provide a way to implement an object that is of type list, but the behaviour
   is defined at app-level
   implemented objects, lists and dictionaries, function calls in an sucky way
   mostly DONE. need more experimentation/examples to find what is needed
   to be done: check for slow-done, using config to disable it, merging the
   branch

 - apigen tool
   changes to instance variables after calls to functions

 - build tool + discussions (carl friedrich, guido)
   it's now actually building pypy, sending the usession directory back

 - .net integration, fixing pypy.net
   quick hack, but pypy.net is no longer broken
   planning session has happened! experiments to come

 - making streams RPython
   done

- using the RPython streams for pypy files
  hopefully done

 - jit code generation
   lots of documentation about the jit-backend interface, fighting with
   ppc code generation
   some refactorings
   looking at whether it's possible to use the llvm code generation
   hackish way: produce strings in memory and have llvm parse them

 - jit ppc code generation (mwh, niko)
   wrote a simple greedy register allocator, spills work
   implement links between basic blocks, placing the arguments in the right way
   stack manipulation, proper stack handling is done


 - jit front end (armin, arre, richard)
   IN-PROGRESS
   fixed the last known bug, experimentation needed
   porting portal tests to run with the backends
   deepfreezing implemented! hint that a structure is not going to change
   deepfreezing dictionaries works
 
 - running tests on the translated pypy-cs (related to py.test refactoring?)

 - pypy interpreter object optimizations
   
   - lists of integers

 - adding the microbenchmark results to the benchmark page
   DONE

 - trying the jit efforts on a regex engine
   kind of worked, some progress

- fixing pypy on windows, adding some more os functions (christian)
  trying to fix a problem with greenlets, trying to get back into the action

- sprint report (carl friedrich, michael)

- work assessment (people that know what the wp numbers mean (and feel like attending))

- general wizardry (samuele)
  found funny bug in the jit stuff
