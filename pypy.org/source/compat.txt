---
layout: page
title: Python compatibility
---

PyPy implements the Python language version 2.5. It supports all of the core
language, passing Python test suite (with minor modifications that were
already accepted in the main python in newer versions). It supports most
of the commonly used Python `standard library modules`_; details below.

PyPy has **alpha-level** support for the `CPython C API`_, however, as of 1.4.1
release this feature is not yet complete. Most libraries will require
a bit of effort to work, but there are known success stories. Check out
PyPy blog for updates.

C extensions need to be recompiled for PyPy in order to work. Depending on
your build system, it might work out of the box or will be slightly harder.
In order to instruct pypy to load a CPython extension (compiled with supplied
Python.h), run following line::

  import cpyext

before importing any extensions. You can put this line in your PYTHONSTARTUP
file if you want this to be enabled permanently.

Standard library modules supported by PyPy, in alphabetical order:

* ``__builtin__ __pypy__ _ast _bisect _codecs _lsprof _minimal_curses _random _rawffi _ssl _socket _sre _weakref array bz2 cStringIO cpyext crypt errno exceptions fcntl  gc itertools marshal math md5 mmap operator parser posix pyexpat select sha signal struct symbol sys termios thread time token unicodedata zipimport zlib``

Supported, but written in pure-python:

* ``binascii cPickle cmath collections ctypes datetime functools grp pwd sqlite3 syslog``

All modules that are pure python in CPython of course work.

Python libraries known to work under PyPy (the list is not exhaustive):

* ctypes

* django (without any DB but sqlite)

* twisted (without ssl support)

* pylons

* divmod's nevow

* pyglet

Known differences that are not going to be fixed:

* PyPy does not support refcounting semantics. The following code
  won't fill the file immediately, but only after a certain period
  of time, when the GC does a collection:

  .. syntax:: python

    open("filename", "w").write("stuff")

  The proper fix is

  .. syntax:: python

    f = open("filename", "w")
    f.write("stuff")
    f.close()

  or using the ``with`` keyword

  .. syntax:: python

    with open("filename", "w") as f:
        f.write("stuff")

* For the same reason, some functions and attributes of the ``gc`` module
  behave in a slightly different way: for example, ``gc.enable`` and
  ``gc.disable`` are supported, but instead of enabling and disabling the GC,
  they just enable and disable the execution of finalizers.  Also,
  ``gc.garbage`` always returns an empty list.

* You can't attach a ``__del__`` method to a class after its creation.

* You can't store non-string keys in type objects. Example

  .. syntax:: python

    class A(object):
        locals()[42] = 3

  won't work.

A more complete list is available at `our dev site`_.

.. _`CPython C API`: http://docs.python.org/c-api/
.. _`standard library modules`: http://docs.python.org/library/
.. _`our dev site`: http://codespeak.net/pypy/dist/pypy/doc/cpython_differences.html
