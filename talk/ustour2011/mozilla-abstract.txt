PyPy Mozilla Talk:  Monday March 7th, 2011 at 2:30
Speakers: Armin Rigo, Maciej Fijalkowski, Alex Gaynor

Bios:
Armin Rigo is a researcher at Heinrich-Heine-Universität in Düsseldorf,
Germany.  His academic interests include Programming Languages and
Implementation Techniques.

He is the lead designer of the PyPy project and one of its
original founders.  He is also the author of Psyco, a hand-coded
Just-in-Time specializing compiler for Python, which can be used
transparently with 32-bit x86 versions of CPython.  Since 2003 he has
worked on all aspects of PyPy: its Python interpreter (written in
Python), its translation toolchain (which produces C code), its
garbage collectors, and its Tracing Just-in-Time compiler generator.
Since the end of 2010, the Just in Time compiler generated by PyPy
has outperformed Psyco, while being much more general and robust.

Maciej Fijalkowski is a core developer of the PyPy project. He
started contributing to it with the help of the Google Summer of Code
Project in 2005, when he developed the Javascript backend. Since then,
he has worked on the core of PyPy, including ctypes, the Just-In-Time
compiler, garbage collectors and more.

At present he is employed by SKA South Africa to build infrastructure
for MeerKAT, a very large radio telescope under construction in the
Karoo desert. The infrastructure is largely python-based and employs
Twisted and PyPy among other technologies.

Alex Gaynor is a core developer of PyPy. Since 2009 he has contributed
to the JIT, and the Python interpreter, working on issues of Python
2.7 compatibility and the CPython C-API, and implementing third party
modules such as PostgreSQL bindings for PyPy. He is also a core
developer of Django (a popular Python web framework), where he works
on all elements of the framework. He is presently an independent
contractor, primarily working in web development where he uses Python
exclusively. Alex is a student at Rensselaer Polytechnic Institute where
he is a Junior pursuing a bachelors degree in Computer Science.

Abstract:

The PyPy project has recently gathered a lot of attention for its
progress on speeding up the Python language -- it is the fastest,
most compatible and most stable 'alternative´ Python interpreter:

* most Python benchmarks run much faster than with CPython or Psyco
* the real-world PyPy compiler toolchain itself (200 KLocs) runs twice as fast
* full compatibility to CPython (more than Jython/IronPython)

In this talk we will focus on how we reached this goal in a truly
ouroboros manner by implementing many pieces in RPython, a subset
of Python that our toolchain analyzes and compiles to C:

* our Python interpreter
* pluggable GCs
* the JIT itself, including x86/ARM backends

The translation toolchain itself is written in full Python (not RPython!)
and generates JIT support automatically from the interpreter source code,
thereby reducing complexity for writing state-of-the-art interpreters.

There are many interesting details that can be explored further;
we will focus on the points the audience is most interested in.  If
you already know what you would like us to speak about, could you
please send a note to lac@openend.se and we will make sure that we
cover this in our presentation.

The PyPy project has a blog which may be of interest.  You can read it
at http://morepypy.blogspot.com/ .
