
Google Tech Talk: Speakers: Armin Rigo, Maciej Fijalkowski

Bios:
Armin Rigo is a researcher at Heinrich-Heine-Universität in Düsseldorf,
Germany.  His academic interests include Programming Languages and
Implementation Techniques.

He is the lead designer of the PyPy project and one of its
original founders.  He is also the author of Psyco, a hand-coded
Just-in-Time specializing compiler for Python, which can be used
transparently with 32-bit x86 versions of CPython.  Since 2003 he has
worked on all aspects of PyPy: its Python interpreter (written in
Python), its translation toolchain (which produces C code), its
garbage collectors, and its Tracing Just-in-Time compiler generator.
Since the end of 2010, the Just in Time compiler generated by PyPy
has outperformed Psyco, while being much more general and robust.

Maciej Fijalkowski is a core developer of the PyPy project. He
started contributing to it with the help of the Google Summer of Code
Project in 2005, when he developed the Javascript backend. Since then,
he has worked on the core of PyPy, including ctypes, the Just-In-Time
compiler, garbage collectors and more.

At present he is employed by SKA South Africa to build infrastructure
for MeerKAT, a very large radio telescope under construction in the
Karoo desert. The infrastructure is largely python-based and employs
Twisted and PyPy among other technologies.

Abstract:
The PyPy project has recently gathered a lot of attention for its
progress in speeding up the Python language -- it is the fastest,
most compatible and most stable 'alternative´ Python interpreter.  No
longer merely a research curiosity, PyPy is now suitable for production
use.  Since 2009, the PyPy project has received funding from the Eurostars 
Eureka program, which targets small European firms which produce research.
(See: http://www.eurostars-eureka.eu/)

We will discuss what the PyPy project has achieved, with a particular
focus on the past two years' work  in the area of dynamic (Just-in-Time) 
interpreters:

* most Python benchmarks run much faster than with CPython or Psyco
* the real-world PyPy compiler toolchain itself (200 KLocs) runs twice as fast
* already supports 64bit and is in the process of supporting ARM
* full compatibility with  CPython (more than Jython/IronPython)
* full (and JIT-ed) ctypes support to call C libraries from Python
* supports Stackless Python (in-progress)
* new "cpyext" layer which integrates existing CPython C extensions
* an experimental super-fast JIT-compilation of calls to C++ libraries

We want to reserve time for discussing potential future work like SWIG
and/or Cython compatibility and other areas brought up by the audience.
There are many interesting details that can be explored further;
we will focus on the points the audience is most interested in.  If
you already know what you would like us to speak about, could you
please send a note to lac@openend.se and we will make sure that we
cover this in our presentation.

The PyPy project has a blog which may be of interest.  You can read
it at http://morepypy.blogspot.com/ .

