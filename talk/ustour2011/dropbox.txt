Talk at Dropbox.  Friday March 4th at 2 p.m.
Speaker: Armin Rigo

Bio:
Armin Rigo is a researcher at Heinrich-Heine-Universität in Düsseldorf,
Germany.  His academic interests include Programming Languages and
Implementation Techniques.

He is the lead designer of the PyPy project and one of its
original founders.  He is also the author of Psyco, a hand-coded
Just-in-Time specializing compiler for Python, which can be used
transparently with 32-bit x86 versions of CPython.  Since 2003 he has
worked on all aspects of PyPy: its Python interpreter (written in
Python), its translation toolchain (which produces C code), its
garbage collectors, and its Tracing Just-in-Time compiler generator.
Since the end of 2010, the Just in Time compiler generated by PyPy
has outperformed Psyco, while being much more general and robust.

Abstract:

The PyPy project (http://pypy.org/) has recently gathered a lot of attention
for its progress in speeding up the Python language -- it is the fastest,
most compatible and most stable 'alternative´ Python interpreter.  No
longer merely a research curiosity, PyPy is now suitable for production
use.  Since 2009, the PyPy project has received funding from the Eurostars 
Eureka program, which targets small European firms which produce research.
(See: http://www.eurostars-eureka.eu/)

We will discuss what the PyPy project has achieved, with a particular
focus on the past two years' work  in the area of dynamic (Just-in-Time) 
interpreters:

* most Python benchmarks run much faster than with CPython or Psyco
* tight loops run much faster, up to 20-60 times faster
* http://speed.pypy.org/
* the real-world PyPy compiler toolchain itself (200 KLocs) runs twice as fast
* pypy already supports 64bit and is in the process of supporting ARM
* full compatibility with  CPython (more than Jython/IronPython)
* full (and JIT-ed) ctypes support to call C libraries from Python
* supports Stackless Python (in-progress)
* new "cpyext" layer which integrates existing CPython C extensions
* an experimental super-fast JIT-compilation of calls to C++ libraries
* smaller total memory usage for large and long-running programs.
* MIT license 
  - with a digression on code-obsfuctation and pypy if there is
    sufficient interest
* pypy and binary packagers. Embedding pypy. One large .exe anyone?
* Future directions.   Since 2009, the PyPy project has received funding 
  from the Eurostars  Eureka program, which targets small European firms 
  which produce research.  What should we do when the funding runs out?
  One thing we would like is to be hired to migrate projects from CPython 
  to PyPy.
* Any other aspect of interest to audience members. 

If there is something you are interested in which isn't mentioned in this
abstract, please send a note to lac@openend.se and we will make sure that 
we cover this in our presentation.

The PyPy project has a blog which may be of interest.  You can read
it at http://morepypy.blogspot.com/ .

