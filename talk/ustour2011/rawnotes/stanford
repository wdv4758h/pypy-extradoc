This talk went well, but it was a bit unexpected.  My expectation was
to find a lecture hall full of students and professors.  We got some.
But it seems that most students watch such things as a video, either
live or time delayed.  So there was 1000 or so of them we did not see.
There were about 45 people in attendence.  Some were academics, but
many were just industry people who make a habit of coming to these
things.

They were sharp.  They asked detailed and reasonable questions which
indicated that they understood what was being presented.  There was a
mix of people who liked and disliked dynamic languages.  Somebody who
came to dinner with us too, is still quite unhappy that Guido rejected
his idea for making python less dynamic for people who want to
guarantee that for using cores.  He mentioned a PEP, I cannot seem to
find it. Many questions, indicating that some of these people already
know what a tracing jit is, and that the concepts were not unfamiliar.
Nice, because they could be impressed by the right stuff, rather than
being so ignorant that they didn't know what was and what was not
impressive.

More interested in JIT details than in architecture.  (At least the
people in the room, the remote ones got no say in what happened.)
Could handle a very technical and detailed discussion.  Did not mind
when we could not run demo due to 32bit 64 bit problem.  I ended up
thinking they were pretty impressed.

The lure of using RPython as a general purpose programming language
captured many.  After the talk proper, since nobody wanted the room,
we did mingle and discuss.  for 45 minutes.  And I had to beat off
would be RPython coders with a stick, almost.  Not sure what Armin and
jacob talked about, there was a lot of it going on.

Somebody wants to build a python compiler.  After Armin and Jacob and
I each gave a pitch on why we think that was impossible, we concluded
that there are some things you have to find out for yourself the hard
way, and for this poor soul, this seems to be one of them.  But the
rest of the room was agreeing with us, so most people seemed to get it.

They are really impressed at the stability, the tests, and that we don't
have lots of bugs reported in the jit of our last public release.

went to dinner.  comoany good, food much less so.  my end of hte table wanted
to talk about stackless, numpy, and pickling stack frames.  They have
a big interest in that for use in cell phnes I think, but maybe I am
wrong there.  Would like the stackless transform to work with the jit.

would like better generated c code, c++ code, wrappers for same.  ctypes
is not everybody's cup of tea.

people really want the gil gone.  many ideas as to how to do concurrency
properly, all incompatible with each other, all causing lots of heated
discussion.  transactional memory vs have each core only work in a
particular piece of memory, vs some weird way to communicate with
only message passing which I think in theory would be an interesting
idea but either I did not understand that person's implementation, or
it would never work.  didn't help that the I want memory tied to the
core people kept interruptng the message passing guy.

If you go to Stanford for your Phd you have to sign a paper saying
that anything that you do while you are attending -- even in your spare
time -- belongs to Stanford.  I was horrified, byut the Americans
did not see it as slavery.  And thought a big name phd was worth not
doing a think with your bright ideas for a few years.

many people worked at interesting startups.  our pycon handout improved
verison, prntede at stanford was downloaded, and many startups
may see it.  Dennis Allison suggests we tell the people at ycombinator
that we would like work.  They may have some, they have a zillion
little startups who may want to give us some.

some discussion of swedish american cultural differences, from people
who think they know what a welfare state is, but don't.

