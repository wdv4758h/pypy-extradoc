====================
PyPy's JIT and Numpy
====================

A common problem when developing scientific applications is that CPython is
too slow. This can mitigated by usage of FORTRAN, C, or Cython in
performance-critical parts of the code, but it would be much nicer if
python ran faster.

Creating a JIT has been one of the main objectives of the PyPy project for
quite a while now.  As of `March 2009`_, we're able to speed up simple
examples in Python about 20-30x over the speed of CPython.  The JIT also
runs CPython's test suite without crashing.  Since PyPy's JIT is much more
flexible than Pysco, we expect even greater speedups in the future, as well
as support for floats and 64bit architectures, which Psyco will not achieve
in forseeable future.

In this talk, we will discuss the design principles and future of PyPy's
JIT but won't go into too many architectural details.

We will also present how JIT can make the life easier for simple
postprocessing of data generated by nonhydrostatic model of geophysical
flows - EULAG for the case of boundary layer clouds observed during
various experimental campaign.

.. _`March 2009`: http://morepypy.blogspot.com/2009/03/good-news-everyone.html
